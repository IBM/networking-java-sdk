/*
 * (C) Copyright IBM Corp. 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package com.ibm.cloud.networking.direct_link_provider.v2;

import com.google.gson.JsonObject;
import com.ibm.cloud.networking.common.SdkCommon;
import com.ibm.cloud.networking.direct_link_provider.v2.model.CreateProviderGatewayOptions;
import com.ibm.cloud.networking.direct_link_provider.v2.model.DeleteProviderGatewayOptions;
import com.ibm.cloud.networking.direct_link_provider.v2.model.GetProviderGatewayOptions;
import com.ibm.cloud.networking.direct_link_provider.v2.model.GetProviderPortOptions;
import com.ibm.cloud.networking.direct_link_provider.v2.model.ListProviderGatewaysOptions;
import com.ibm.cloud.networking.direct_link_provider.v2.model.ListProviderPortsOptions;
import com.ibm.cloud.networking.direct_link_provider.v2.model.ProviderGateway;
import com.ibm.cloud.networking.direct_link_provider.v2.model.ProviderGatewayCollection;
import com.ibm.cloud.networking.direct_link_provider.v2.model.ProviderPort;
import com.ibm.cloud.networking.direct_link_provider.v2.model.ProviderPortCollection;
import com.ibm.cloud.networking.direct_link_provider.v2.model.UpdateProviderGatewayOptions;
import com.ibm.cloud.sdk.core.http.RequestBuilder;
import com.ibm.cloud.sdk.core.http.ResponseConverter;
import com.ibm.cloud.sdk.core.http.ServiceCall;
import com.ibm.cloud.sdk.core.security.Authenticator;
import com.ibm.cloud.sdk.core.security.ConfigBasedAuthenticatorFactory;
import com.ibm.cloud.sdk.core.service.BaseService;
import com.ibm.cloud.sdk.core.util.ResponseConverterUtils;
import java.util.Map;
import java.util.Map.Entry;

/**
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator).
 *
 * @version v2
 */
public class DirectLinkProvider extends BaseService {

  public static final String DEFAULT_SERVICE_NAME = "direct_link_provider";

  public static final String DEFAULT_SERVICE_URL = "https://directlink.cloud.ibm.com/provider/v2";

  private String version;

 /**
   * Class method which constructs an instance of the `DirectLinkProvider` client.
   * The default service name is used to configure the client instance.
   *
   * @param version Requests the version of the API as a date in the format `YYYY-MM-DD`. Any date from 2020-04-28 up to
 * the current date may be provided. Specify the current date to request the latest version.
   * @return an instance of the `DirectLinkProvider` client using external configuration
   */
  public static DirectLinkProvider newInstance(String version) {
    return newInstance(version, DEFAULT_SERVICE_NAME);
  }

  /**
   * Class method which constructs an instance of the `DirectLinkProvider` client.
   * The specified service name is used to configure the client instance.
   *
   * @param version Requests the version of the API as a date in the format `YYYY-MM-DD`. Any date from 2020-04-28 up to
 * the current date may be provided. Specify the current date to request the latest version.
   * @param serviceName the service name to be used when configuring the client instance
   * @return an instance of the `DirectLinkProvider` client using external configuration
   */
  public static DirectLinkProvider newInstance(String version, String serviceName) {
    Authenticator authenticator = ConfigBasedAuthenticatorFactory.getAuthenticator(serviceName);
    DirectLinkProvider service = new DirectLinkProvider(version, serviceName, authenticator);
    service.configureService(serviceName);
    return service;
  }

  /**
   * Constructs an instance of the `DirectLinkProvider` client.
   * The specified service name and authenticator are used to configure the client instance.
   *
   * @param version Requests the version of the API as a date in the format `YYYY-MM-DD`. Any date from 2020-04-28 up to
 * the current date may be provided. Specify the current date to request the latest version.
   * @param serviceName the service name to be used when configuring the client instance
   * @param authenticator the {@link Authenticator} instance to be configured for this client
   */
  public DirectLinkProvider(String version, String serviceName, Authenticator authenticator) {
    super(serviceName, authenticator);
    setServiceUrl(DEFAULT_SERVICE_URL);
    setVersion(version);
  }

  /**
   * Gets the version.
   *
   * Requests the version of the API as a date in the format `YYYY-MM-DD`. Any date from 2020-04-28 up to the current
   * date may be provided. Specify the current date to request the latest version.
   *
   * @return the version
   */
  public String getVersion() {
    return this.version;
  }

  /**
   * Sets the version.
   *
   * @param version the new version
   */
  public void setVersion(final String version) {
    com.ibm.cloud.sdk.core.util.Validator.notEmpty(version, "version cannot be empty.");
    this.version = version;
  }

  /**
   * List gateways.
   *
   * List all Direct Link Connect gateways created by this provider.
   *
   * @param listProviderGatewaysOptions the {@link ListProviderGatewaysOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link ProviderGatewayCollection}
   */
  public ServiceCall<ProviderGatewayCollection> listProviderGateways(ListProviderGatewaysOptions listProviderGatewaysOptions) {
    String[] pathSegments = { "gateways" };
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_provider", "v2", "listProviderGateways");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    if (listProviderGatewaysOptions != null) {
      builder.query("version", this.version);
      if (listProviderGatewaysOptions.start() != null) {
        builder.query("start", listProviderGatewaysOptions.start());
      }
      if (listProviderGatewaysOptions.limit() != null) {
        builder.query("limit", String.valueOf(listProviderGatewaysOptions.limit()));
      }
    }
    ResponseConverter<ProviderGatewayCollection> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<ProviderGatewayCollection>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * List gateways.
   *
   * List all Direct Link Connect gateways created by this provider.
   *
   * @return a {@link ServiceCall} with a result of type {@link ProviderGatewayCollection}
   */
  public ServiceCall<ProviderGatewayCollection> listProviderGateways() {
    return listProviderGateways(null);
  }

  /**
   * Create gateway.
   *
   * Create a Direct Link Connect gateway based on the supplied template in the specified customer account.
   *
   * The gateway will be 'provider_api_managed=true'.
   *
   * @param createProviderGatewayOptions the {@link CreateProviderGatewayOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link ProviderGateway}
   */
  public ServiceCall<ProviderGateway> createProviderGateway(CreateProviderGatewayOptions createProviderGatewayOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(createProviderGatewayOptions,
      "createProviderGatewayOptions cannot be null");
    String[] pathSegments = { "gateways" };
    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_provider", "v2", "createProviderGateway");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.query("version", this.version);
    if (createProviderGatewayOptions.checkOnly() != null) {
      builder.query("check_only", createProviderGatewayOptions.checkOnly());
    }
    final JsonObject contentJson = new JsonObject();
    contentJson.addProperty("bgp_asn", createProviderGatewayOptions.bgpAsn());
    contentJson.addProperty("customer_account_id", createProviderGatewayOptions.customerAccountId());
    contentJson.addProperty("name", createProviderGatewayOptions.name());
    contentJson.add("port", com.ibm.cloud.sdk.core.util.GsonSingleton.getGson().toJsonTree(createProviderGatewayOptions.port()));
    contentJson.addProperty("speed_mbps", createProviderGatewayOptions.speedMbps());
    if (createProviderGatewayOptions.bgpCerCidr() != null) {
      contentJson.addProperty("bgp_cer_cidr", createProviderGatewayOptions.bgpCerCidr());
    }
    if (createProviderGatewayOptions.bgpIbmCidr() != null) {
      contentJson.addProperty("bgp_ibm_cidr", createProviderGatewayOptions.bgpIbmCidr());
    }
    builder.bodyJson(contentJson);
    ResponseConverter<ProviderGateway> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<ProviderGateway>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Delete gateway.
   *
   * Delete a Direct Link Connect provider managed gateway.
   *
   * @param deleteProviderGatewayOptions the {@link DeleteProviderGatewayOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link ProviderGateway}
   */
  public ServiceCall<ProviderGateway> deleteProviderGateway(DeleteProviderGatewayOptions deleteProviderGatewayOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(deleteProviderGatewayOptions,
      "deleteProviderGatewayOptions cannot be null");
    String[] pathSegments = { "gateways" };
    String[] pathParameters = { deleteProviderGatewayOptions.id() };
    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_provider", "v2", "deleteProviderGateway");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.query("version", this.version);
    ResponseConverter<ProviderGateway> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<ProviderGateway>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Get gateway.
   *
   * Get a Direct Link Connect gateway.
   *      Gateways with either `provider_api_managed=true` or `provider_api_managed=false` can be retrieved.
   *
   * @param getProviderGatewayOptions the {@link GetProviderGatewayOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link ProviderGateway}
   */
  public ServiceCall<ProviderGateway> getProviderGateway(GetProviderGatewayOptions getProviderGatewayOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(getProviderGatewayOptions,
      "getProviderGatewayOptions cannot be null");
    String[] pathSegments = { "gateways" };
    String[] pathParameters = { getProviderGatewayOptions.id() };
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_provider", "v2", "getProviderGateway");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.query("version", this.version);
    ResponseConverter<ProviderGateway> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<ProviderGateway>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Update gateway.
   *
   * Update a Direct Link Connect provider managed gateway.
   *
   * Name changes are applied immediately, other changes result in a gateway change_request and require approval from
   * the client.
   *
   * @param updateProviderGatewayOptions the {@link UpdateProviderGatewayOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link ProviderGateway}
   */
  public ServiceCall<ProviderGateway> updateProviderGateway(UpdateProviderGatewayOptions updateProviderGatewayOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(updateProviderGatewayOptions,
      "updateProviderGatewayOptions cannot be null");
    String[] pathSegments = { "gateways" };
    String[] pathParameters = { updateProviderGatewayOptions.id() };
    RequestBuilder builder = RequestBuilder.patch(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_provider", "v2", "updateProviderGateway");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.query("version", this.version);
    final JsonObject contentJson = new JsonObject();
    if (updateProviderGatewayOptions.name() != null) {
      contentJson.addProperty("name", updateProviderGatewayOptions.name());
    }
    if (updateProviderGatewayOptions.speedMbps() != null) {
      contentJson.addProperty("speed_mbps", updateProviderGatewayOptions.speedMbps());
    }
    builder.bodyJson(contentJson);
    ResponseConverter<ProviderGateway> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<ProviderGateway>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * List ports.
   *
   * List all provider ports (associated with the caller).
   *
   * @param listProviderPortsOptions the {@link ListProviderPortsOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link ProviderPortCollection}
   */
  public ServiceCall<ProviderPortCollection> listProviderPorts(ListProviderPortsOptions listProviderPortsOptions) {
    String[] pathSegments = { "ports" };
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_provider", "v2", "listProviderPorts");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    if (listProviderPortsOptions != null) {
      builder.query("version", this.version);
      if (listProviderPortsOptions.start() != null) {
        builder.query("start", listProviderPortsOptions.start());
      }
      if (listProviderPortsOptions.limit() != null) {
        builder.query("limit", String.valueOf(listProviderPortsOptions.limit()));
      }
    }
    ResponseConverter<ProviderPortCollection> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<ProviderPortCollection>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * List ports.
   *
   * List all provider ports (associated with the caller).
   *
   * @return a {@link ServiceCall} with a result of type {@link ProviderPortCollection}
   */
  public ServiceCall<ProviderPortCollection> listProviderPorts() {
    return listProviderPorts(null);
  }

  /**
   * Get port.
   *
   * Get provider port information.
   *
   * @param getProviderPortOptions the {@link GetProviderPortOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link ProviderPort}
   */
  public ServiceCall<ProviderPort> getProviderPort(GetProviderPortOptions getProviderPortOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(getProviderPortOptions,
      "getProviderPortOptions cannot be null");
    String[] pathSegments = { "ports" };
    String[] pathParameters = { getProviderPortOptions.id() };
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_provider", "v2", "getProviderPort");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.query("version", this.version);
    ResponseConverter<ProviderPort> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<ProviderPort>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

}
