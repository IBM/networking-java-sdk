/*
 * (C) Copyright IBM Corp. 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package com.ibm.cloud.networking.direct_link_apis.v1;

import com.google.gson.JsonObject;
import com.ibm.cloud.networking.common.SdkCommon;
import com.ibm.cloud.networking.direct_link_apis.v1.model.CreateGatewayActionOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.CreateGatewayCompletionNoticeOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.CreateGatewayOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.CreateGatewayVirtualConnectionOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.DeleteGatewayOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.DeleteGatewayVirtualConnectionOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.Gateway;
import com.ibm.cloud.networking.direct_link_apis.v1.model.GatewayCollection;
import com.ibm.cloud.networking.direct_link_apis.v1.model.GatewayVirtualConnection;
import com.ibm.cloud.networking.direct_link_apis.v1.model.GatewayVirtualConnectionCollection;
import com.ibm.cloud.networking.direct_link_apis.v1.model.GetGatewayOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.GetGatewayVirtualConnectionOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.GetPortOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.ListGatewayCompletionNoticeOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.ListGatewayLetterOfAuthorizationOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.ListGatewayVirtualConnectionsOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.ListGatewaysOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.ListOfferingTypeLocationCrossConnectRoutersOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.ListOfferingTypeLocationsOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.ListOfferingTypeSpeedsOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.ListPortsOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.LocationCollection;
import com.ibm.cloud.networking.direct_link_apis.v1.model.LocationCrossConnectRouterCollection;
import com.ibm.cloud.networking.direct_link_apis.v1.model.OfferingSpeedCollection;
import com.ibm.cloud.networking.direct_link_apis.v1.model.Port;
import com.ibm.cloud.networking.direct_link_apis.v1.model.PortCollection;
import com.ibm.cloud.networking.direct_link_apis.v1.model.UpdateGatewayOptions;
import com.ibm.cloud.networking.direct_link_apis.v1.model.UpdateGatewayVirtualConnectionOptions;
import com.ibm.cloud.sdk.core.http.RequestBuilder;
import com.ibm.cloud.sdk.core.http.ResponseConverter;
import com.ibm.cloud.sdk.core.http.ServiceCall;
import com.ibm.cloud.sdk.core.security.Authenticator;
import com.ibm.cloud.sdk.core.security.ConfigBasedAuthenticatorFactory;
import com.ibm.cloud.sdk.core.service.BaseService;
import com.ibm.cloud.sdk.core.util.RequestUtils;
import com.ibm.cloud.sdk.core.util.ResponseConverterUtils;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.Map.Entry;
import okhttp3.MultipartBody;

/**
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator).
 *
 * @version v1
 */
public class DirectLinkApis extends BaseService {

  public static final String DEFAULT_SERVICE_NAME = "direct_link_apis";

  public static final String DEFAULT_SERVICE_URL = "https://directlink.cloud.ibm.com/v1";

  private Date version;
  private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

 /**
   * Class method which constructs an instance of the `DirectLinkApis` client.
   * The default service name is used to configure the client instance.
   *
   * @param version Requests the version of the API as a date in the format `YYYY-MM-DD`. Any date from 2019-12-13 up to
 * the current date may be provided. Specify the current date to request the latest version.
   * @return an instance of the `DirectLinkApis` client using external configuration
   */
  public static DirectLinkApis newInstance(Date version) {
    return newInstance(version, DEFAULT_SERVICE_NAME);
  }

  /**
   * Class method which constructs an instance of the `DirectLinkApis` client.
   * The specified service name is used to configure the client instance.
   *
   * @param version Requests the version of the API as a date in the format `YYYY-MM-DD`. Any date from 2019-12-13 up to
 * the current date may be provided. Specify the current date to request the latest version.
   * @param serviceName the service name to be used when configuring the client instance
   * @return an instance of the `DirectLinkApis` client using external configuration
   */
  public static DirectLinkApis newInstance(Date version, String serviceName) {
    Authenticator authenticator = ConfigBasedAuthenticatorFactory.getAuthenticator(serviceName);
    DirectLinkApis service = new DirectLinkApis(version, serviceName, authenticator);
    service.configureService(serviceName);
    return service;
  }

  /**
   * Constructs an instance of the `DirectLinkApis` client.
   * The specified service name and authenticator are used to configure the client instance.
   *
   * @param version Requests the version of the API as a date in the format `YYYY-MM-DD`. Any date from 2019-12-13 up to
 * the current date may be provided. Specify the current date to request the latest version.
   * @param serviceName the service name to be used when configuring the client instance
   * @param authenticator the {@link Authenticator} instance to be configured for this client
   */
  public DirectLinkApis(Date version, String serviceName, Authenticator authenticator) {
    super(serviceName, authenticator);
    setServiceUrl(DEFAULT_SERVICE_URL);
    setVersion(version);
  }

  /**
   * Gets the version.
   *
   * Requests the version of the API as a date in the format `YYYY-MM-DD`. Any date from 2019-12-13 up to the current
   * date may be provided. Specify the current date to request the latest version.
   *
   * @return the version
   */
  public Date getVersion() {
    return this.version;
  }

  /**
   * Sets the version.
   *
   * @param version the new version
   */
  public void setVersion(final Date version) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(version, "version cannot be null.");
    this.version = version;
  }

  /**
   * List gateways.
   *
   * List all Direct Link gateways in this account.  Gateways in other accounts with connections to networks in this
   * account are also returned.
   *
   * @param listGatewaysOptions the {@link ListGatewaysOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link GatewayCollection}
   */
  public ServiceCall<GatewayCollection> listGateways(ListGatewaysOptions listGatewaysOptions) {
    String[] pathSegments = { "gateways" };
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "listGateways");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    if (listGatewaysOptions != null) {
      builder.query("version", dateFormat.format(this.version));
    }
    ResponseConverter<GatewayCollection> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<GatewayCollection>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * List gateways.
   *
   * List all Direct Link gateways in this account.  Gateways in other accounts with connections to networks in this
   * account are also returned.
   *
   * @return a {@link ServiceCall} with a result of type {@link GatewayCollection}
   */
  public ServiceCall<GatewayCollection> listGateways() {
    return listGateways(null);
  }

  /**
   * Create gateway.
   *
   * Creates a Direct Link gateway based on the supplied template.
   *
   * @param createGatewayOptions the {@link CreateGatewayOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link Gateway}
   */
  public ServiceCall<Gateway> createGateway(CreateGatewayOptions createGatewayOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(createGatewayOptions,
      "createGatewayOptions cannot be null");
    String[] pathSegments = { "gateways" };
    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "createGateway");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.query("version", dateFormat.format(this.version));
    builder.bodyContent(com.ibm.cloud.sdk.core.util.GsonSingleton.getGsonWithoutPrettyPrinting().toJson(createGatewayOptions.gatewayTemplate()), "application/json");
    ResponseConverter<Gateway> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<Gateway>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Delete gateway.
   *
   * Delete a Direct Link gateway.
   *
   * @param deleteGatewayOptions the {@link DeleteGatewayOptions} containing the options for the call
   * @return a {@link ServiceCall} with a void result
   */
  public ServiceCall<Void> deleteGateway(DeleteGatewayOptions deleteGatewayOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(deleteGatewayOptions,
      "deleteGatewayOptions cannot be null");
    String[] pathSegments = { "gateways" };
    String[] pathParameters = { deleteGatewayOptions.id() };
    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "deleteGateway");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.query("version", dateFormat.format(this.version));
    ResponseConverter<Void> responseConverter = ResponseConverterUtils.getVoid();
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Get gateway.
   *
   * Retrieve a Direct Link gateway.
   *
   * @param getGatewayOptions the {@link GetGatewayOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link Gateway}
   */
  public ServiceCall<Gateway> getGateway(GetGatewayOptions getGatewayOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(getGatewayOptions,
      "getGatewayOptions cannot be null");
    String[] pathSegments = { "gateways" };
    String[] pathParameters = { getGatewayOptions.id() };
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "getGateway");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.query("version", dateFormat.format(this.version));
    ResponseConverter<Gateway> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<Gateway>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Update gateway.
   *
   * Update a Direct Link gateway.
   *
   * @param updateGatewayOptions the {@link UpdateGatewayOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link Gateway}
   */
  public ServiceCall<Gateway> updateGateway(UpdateGatewayOptions updateGatewayOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(updateGatewayOptions,
      "updateGatewayOptions cannot be null");
    String[] pathSegments = { "gateways" };
    String[] pathParameters = { updateGatewayOptions.id() };
    RequestBuilder builder = RequestBuilder.patch(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "updateGateway");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.query("version", dateFormat.format(this.version));
    final JsonObject contentJson = new JsonObject();
    if (updateGatewayOptions.global() != null) {
      contentJson.addProperty("global", updateGatewayOptions.global());
    }
    if (updateGatewayOptions.loaRejectReason() != null) {
      contentJson.addProperty("loa_reject_reason", updateGatewayOptions.loaRejectReason());
    }
    if (updateGatewayOptions.metered() != null) {
      contentJson.addProperty("metered", updateGatewayOptions.metered());
    }
    if (updateGatewayOptions.name() != null) {
      contentJson.addProperty("name", updateGatewayOptions.name());
    }
    if (updateGatewayOptions.operationalStatus() != null) {
      contentJson.addProperty("operational_status", updateGatewayOptions.operationalStatus());
    }
    if (updateGatewayOptions.speedMbps() != null) {
      contentJson.addProperty("speed_mbps", updateGatewayOptions.speedMbps());
    }
    builder.bodyJson(contentJson);
    ResponseConverter<Gateway> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<Gateway>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Approve or reject change requests.
   *
   * Approve or reject a gateway's current oustanding change request.
   *
   * This API is only used for provider created Direct Link Connect gateways to approve or reject specific changes
   * initiated from a provider portal.
   *
   * @param createGatewayActionOptions the {@link CreateGatewayActionOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link Gateway}
   */
  public ServiceCall<Gateway> createGatewayAction(CreateGatewayActionOptions createGatewayActionOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(createGatewayActionOptions,
      "createGatewayActionOptions cannot be null");
    String[] pathSegments = { "gateways", "actions" };
    String[] pathParameters = { createGatewayActionOptions.id() };
    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "createGatewayAction");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.query("version", dateFormat.format(this.version));
    final JsonObject contentJson = new JsonObject();
    contentJson.addProperty("action", createGatewayActionOptions.action());
    if (createGatewayActionOptions.global() != null) {
      contentJson.addProperty("global", createGatewayActionOptions.global());
    }
    if (createGatewayActionOptions.metered() != null) {
      contentJson.addProperty("metered", createGatewayActionOptions.metered());
    }
    if (createGatewayActionOptions.resourceGroup() != null) {
      contentJson.add("resource_group", com.ibm.cloud.sdk.core.util.GsonSingleton.getGson().toJsonTree(createGatewayActionOptions.resourceGroup()));
    }
    if (createGatewayActionOptions.updates() != null) {
      contentJson.add("updates", com.ibm.cloud.sdk.core.util.GsonSingleton.getGson().toJsonTree(createGatewayActionOptions.updates()));
    }
    builder.bodyJson(contentJson);
    ResponseConverter<Gateway> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<Gateway>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Get completion notice.
   *
   * Retrieve a Direct Link Dedicated gateway's completion notice.
   *
   * @param listGatewayCompletionNoticeOptions the {@link ListGatewayCompletionNoticeOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link InputStream}
   */
  public ServiceCall<InputStream> listGatewayCompletionNotice(ListGatewayCompletionNoticeOptions listGatewayCompletionNoticeOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(listGatewayCompletionNoticeOptions,
      "listGatewayCompletionNoticeOptions cannot be null");
    String[] pathSegments = { "gateways", "completion_notice" };
    String[] pathParameters = { listGatewayCompletionNoticeOptions.id() };
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "listGatewayCompletionNotice");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/pdf");
    builder.query("version", dateFormat.format(this.version));
    ResponseConverter<InputStream> responseConverter = ResponseConverterUtils.getInputStream();
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Create completion notice.
   *
   * Upload a Direct Link Dedicated gateway completion notice.
   *
   * @param createGatewayCompletionNoticeOptions the {@link CreateGatewayCompletionNoticeOptions} containing the options for the call
   * @return a {@link ServiceCall} with a void result
   */
  public ServiceCall<Void> createGatewayCompletionNotice(CreateGatewayCompletionNoticeOptions createGatewayCompletionNoticeOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(createGatewayCompletionNoticeOptions,
      "createGatewayCompletionNoticeOptions cannot be null");
    com.ibm.cloud.sdk.core.util.Validator.isTrue((createGatewayCompletionNoticeOptions.upload() != null), "At least one of  or upload must be supplied.");
    String[] pathSegments = { "gateways", "completion_notice" };
    String[] pathParameters = { createGatewayCompletionNoticeOptions.id() };
    RequestBuilder builder = RequestBuilder.put(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "createGatewayCompletionNotice");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.query("version", dateFormat.format(this.version));
    MultipartBody.Builder multipartBuilder = new MultipartBody.Builder();
    multipartBuilder.setType(MultipartBody.FORM);
    if (createGatewayCompletionNoticeOptions.upload() != null) {
      okhttp3.RequestBody uploadBody = RequestUtils.inputStreamBody(createGatewayCompletionNoticeOptions.upload(), createGatewayCompletionNoticeOptions.uploadContentType());
      multipartBuilder.addFormDataPart("upload", "filename", uploadBody);
    }
    builder.body(multipartBuilder.build());
    ResponseConverter<Void> responseConverter = ResponseConverterUtils.getVoid();
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Get letter of authorization.
   *
   * Retrieve a Direct Link Dedicated gateway's Letter of Authorization.
   *
   * @param listGatewayLetterOfAuthorizationOptions the {@link ListGatewayLetterOfAuthorizationOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link InputStream}
   */
  public ServiceCall<InputStream> listGatewayLetterOfAuthorization(ListGatewayLetterOfAuthorizationOptions listGatewayLetterOfAuthorizationOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(listGatewayLetterOfAuthorizationOptions,
      "listGatewayLetterOfAuthorizationOptions cannot be null");
    String[] pathSegments = { "gateways", "letter_of_authorization" };
    String[] pathParameters = { listGatewayLetterOfAuthorizationOptions.id() };
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "listGatewayLetterOfAuthorization");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/pdf");
    builder.query("version", dateFormat.format(this.version));
    ResponseConverter<InputStream> responseConverter = ResponseConverterUtils.getInputStream();
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * List available locations.
   *
   * Retrieve the list of valid locations for the specified Direct Link offering.
   *
   * @param listOfferingTypeLocationsOptions the {@link ListOfferingTypeLocationsOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link LocationCollection}
   */
  public ServiceCall<LocationCollection> listOfferingTypeLocations(ListOfferingTypeLocationsOptions listOfferingTypeLocationsOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(listOfferingTypeLocationsOptions,
      "listOfferingTypeLocationsOptions cannot be null");
    String[] pathSegments = { "offering_types", "locations" };
    String[] pathParameters = { listOfferingTypeLocationsOptions.offeringType() };
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "listOfferingTypeLocations");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.query("version", dateFormat.format(this.version));
    ResponseConverter<LocationCollection> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<LocationCollection>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * List routers.
   *
   * Retrieve location specific cross connect router information.  Only valid for offering_type=dedicated locations.
   *
   * @param listOfferingTypeLocationCrossConnectRoutersOptions the {@link ListOfferingTypeLocationCrossConnectRoutersOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link LocationCrossConnectRouterCollection}
   */
  public ServiceCall<LocationCrossConnectRouterCollection> listOfferingTypeLocationCrossConnectRouters(ListOfferingTypeLocationCrossConnectRoutersOptions listOfferingTypeLocationCrossConnectRoutersOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(listOfferingTypeLocationCrossConnectRoutersOptions,
      "listOfferingTypeLocationCrossConnectRoutersOptions cannot be null");
    String[] pathSegments = { "offering_types", "locations", "cross_connect_routers" };
    String[] pathParameters = { listOfferingTypeLocationCrossConnectRoutersOptions.offeringType(), listOfferingTypeLocationCrossConnectRoutersOptions.locationName() };
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "listOfferingTypeLocationCrossConnectRouters");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.query("version", dateFormat.format(this.version));
    ResponseConverter<LocationCrossConnectRouterCollection> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<LocationCrossConnectRouterCollection>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * List speed options.
   *
   * List the available Direct Link speeds.
   *
   * @param listOfferingTypeSpeedsOptions the {@link ListOfferingTypeSpeedsOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link OfferingSpeedCollection}
   */
  public ServiceCall<OfferingSpeedCollection> listOfferingTypeSpeeds(ListOfferingTypeSpeedsOptions listOfferingTypeSpeedsOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(listOfferingTypeSpeedsOptions,
      "listOfferingTypeSpeedsOptions cannot be null");
    String[] pathSegments = { "offering_types", "speeds" };
    String[] pathParameters = { listOfferingTypeSpeedsOptions.offeringType() };
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "listOfferingTypeSpeeds");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.query("version", dateFormat.format(this.version));
    ResponseConverter<OfferingSpeedCollection> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<OfferingSpeedCollection>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * List ports.
   *
   * Retrieve list of available Direct Link connect ports.  These ports can be used to create Direct Link connect
   * gateways.
   *
   * @param listPortsOptions the {@link ListPortsOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link PortCollection}
   */
  public ServiceCall<PortCollection> listPorts(ListPortsOptions listPortsOptions) {
    String[] pathSegments = { "ports" };
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "listPorts");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    if (listPortsOptions != null) {
      builder.query("version", dateFormat.format(this.version));
      if (listPortsOptions.start() != null) {
        builder.query("start", listPortsOptions.start());
      }
      if (listPortsOptions.limit() != null) {
        builder.query("limit", String.valueOf(listPortsOptions.limit()));
      }
      if (listPortsOptions.locationName() != null) {
        builder.query("location_name", listPortsOptions.locationName());
      }
    }
    ResponseConverter<PortCollection> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<PortCollection>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * List ports.
   *
   * Retrieve list of available Direct Link connect ports.  These ports can be used to create Direct Link connect
   * gateways.
   *
   * @return a {@link ServiceCall} with a result of type {@link PortCollection}
   */
  public ServiceCall<PortCollection> listPorts() {
    return listPorts(null);
  }

  /**
   * Get port.
   *
   * Retrieve Direct Link Connect provider port.
   *
   * @param getPortOptions the {@link GetPortOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link Port}
   */
  public ServiceCall<Port> getPort(GetPortOptions getPortOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(getPortOptions,
      "getPortOptions cannot be null");
    String[] pathSegments = { "ports" };
    String[] pathParameters = { getPortOptions.id() };
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "getPort");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.query("version", dateFormat.format(this.version));
    ResponseConverter<Port> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<Port>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * List virtual connections.
   *
   * List a gateway's virtual connections.   For gateway in other account with virtual connections that connect to
   * network in this account.  Only virtual connections that connect to this account are returned.
   *
   * @param listGatewayVirtualConnectionsOptions the {@link ListGatewayVirtualConnectionsOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link GatewayVirtualConnectionCollection}
   */
  public ServiceCall<GatewayVirtualConnectionCollection> listGatewayVirtualConnections(ListGatewayVirtualConnectionsOptions listGatewayVirtualConnectionsOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(listGatewayVirtualConnectionsOptions,
      "listGatewayVirtualConnectionsOptions cannot be null");
    String[] pathSegments = { "gateways", "virtual_connections" };
    String[] pathParameters = { listGatewayVirtualConnectionsOptions.gatewayId() };
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "listGatewayVirtualConnections");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.query("version", dateFormat.format(this.version));
    ResponseConverter<GatewayVirtualConnectionCollection> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<GatewayVirtualConnectionCollection>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Create virtual connection.
   *
   * Create a virtual connection to the specified network.
   *
   * @param createGatewayVirtualConnectionOptions the {@link CreateGatewayVirtualConnectionOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link GatewayVirtualConnection}
   */
  public ServiceCall<GatewayVirtualConnection> createGatewayVirtualConnection(CreateGatewayVirtualConnectionOptions createGatewayVirtualConnectionOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(createGatewayVirtualConnectionOptions,
      "createGatewayVirtualConnectionOptions cannot be null");
    String[] pathSegments = { "gateways", "virtual_connections" };
    String[] pathParameters = { createGatewayVirtualConnectionOptions.gatewayId() };
    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "createGatewayVirtualConnection");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.query("version", dateFormat.format(this.version));
    final JsonObject contentJson = new JsonObject();
    contentJson.addProperty("name", createGatewayVirtualConnectionOptions.name());
    contentJson.addProperty("type", createGatewayVirtualConnectionOptions.type());
    if (createGatewayVirtualConnectionOptions.networkId() != null) {
      contentJson.addProperty("network_id", createGatewayVirtualConnectionOptions.networkId());
    }
    builder.bodyJson(contentJson);
    ResponseConverter<GatewayVirtualConnection> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<GatewayVirtualConnection>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Delete virtual connection.
   *
   * Delete the virtual connection.
   *
   * @param deleteGatewayVirtualConnectionOptions the {@link DeleteGatewayVirtualConnectionOptions} containing the options for the call
   * @return a {@link ServiceCall} with a void result
   */
  public ServiceCall<Void> deleteGatewayVirtualConnection(DeleteGatewayVirtualConnectionOptions deleteGatewayVirtualConnectionOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(deleteGatewayVirtualConnectionOptions,
      "deleteGatewayVirtualConnectionOptions cannot be null");
    String[] pathSegments = { "gateways", "virtual_connections" };
    String[] pathParameters = { deleteGatewayVirtualConnectionOptions.gatewayId(), deleteGatewayVirtualConnectionOptions.id() };
    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "deleteGatewayVirtualConnection");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.query("version", dateFormat.format(this.version));
    ResponseConverter<Void> responseConverter = ResponseConverterUtils.getVoid();
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Get virtual connection.
   *
   * Retrieve a virtual connection.
   *
   * @param getGatewayVirtualConnectionOptions the {@link GetGatewayVirtualConnectionOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link GatewayVirtualConnection}
   */
  public ServiceCall<GatewayVirtualConnection> getGatewayVirtualConnection(GetGatewayVirtualConnectionOptions getGatewayVirtualConnectionOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(getGatewayVirtualConnectionOptions,
      "getGatewayVirtualConnectionOptions cannot be null");
    String[] pathSegments = { "gateways", "virtual_connections" };
    String[] pathParameters = { getGatewayVirtualConnectionOptions.gatewayId(), getGatewayVirtualConnectionOptions.id() };
    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "getGatewayVirtualConnection");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.query("version", dateFormat.format(this.version));
    ResponseConverter<GatewayVirtualConnection> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<GatewayVirtualConnection>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

  /**
   * Update virtual connection.
   *
   * Update a virtual connection.
   *
   * @param updateGatewayVirtualConnectionOptions the {@link UpdateGatewayVirtualConnectionOptions} containing the options for the call
   * @return a {@link ServiceCall} with a result of type {@link GatewayVirtualConnection}
   */
  public ServiceCall<GatewayVirtualConnection> updateGatewayVirtualConnection(UpdateGatewayVirtualConnectionOptions updateGatewayVirtualConnectionOptions) {
    com.ibm.cloud.sdk.core.util.Validator.notNull(updateGatewayVirtualConnectionOptions,
      "updateGatewayVirtualConnectionOptions cannot be null");
    String[] pathSegments = { "gateways", "virtual_connections" };
    String[] pathParameters = { updateGatewayVirtualConnectionOptions.gatewayId(), updateGatewayVirtualConnectionOptions.id() };
    RequestBuilder builder = RequestBuilder.patch(RequestBuilder.constructHttpUrl(getServiceUrl(), pathSegments, pathParameters));
    Map<String, String> sdkHeaders = SdkCommon.getSdkHeaders("direct_link_apis", "v1", "updateGatewayVirtualConnection");
    for (Entry<String, String> header : sdkHeaders.entrySet()) {
      builder.header(header.getKey(), header.getValue());
    }
    builder.header("Accept", "application/json");
    builder.query("version", dateFormat.format(this.version));
    final JsonObject contentJson = new JsonObject();
    if (updateGatewayVirtualConnectionOptions.name() != null) {
      contentJson.addProperty("name", updateGatewayVirtualConnectionOptions.name());
    }
    if (updateGatewayVirtualConnectionOptions.status() != null) {
      contentJson.addProperty("status", updateGatewayVirtualConnectionOptions.status());
    }
    builder.bodyJson(contentJson);
    ResponseConverter<GatewayVirtualConnection> responseConverter =
      ResponseConverterUtils.getValue(new com.google.gson.reflect.TypeToken<GatewayVirtualConnection>() { }.getType());
    return createServiceCall(builder.build(), responseConverter);
  }

}
